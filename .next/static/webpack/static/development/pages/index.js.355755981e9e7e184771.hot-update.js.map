{"version":3,"file":"static/webpack/static/development/pages/index.js.355755981e9e7e184771.hot-update.js","sources":["webpack:///./components/Carousel.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { FilterContext } from \"../contexts/FilterContext\";\nimport { SearchContext } from \"../contexts/SearchContext\";\nimport { AnimeContext } from \"../contexts/AnimeContext\";\nimport Anime from \"./Anime\";\nimport {device} from \"../devices\"\nimport Loader from 'react-loader-spinner'\n\n\nconst Carousel = ({ topAnime }) => {\n  const [anime, setAnime] = useState(topAnime);\n  const [loading, setLoading] = useState(false)\n\n  const { filter } = useContext(FilterContext);\n  const { search } = useContext(SearchContext);\n  const { selected, dispatch } = useContext(AnimeContext);\n\n  const carouselSelector = useRef();\n  const [scrollProgress, setScrollProgress] = useState(\"0\");\n    let getScrollPercent = () => {\n       return  (carouselSelector.current.scrollLeft /\n            (carouselSelector.current.scrollWidth - carouselSelector.current.offsetWidth)) * 100\n    }\n\n  const [isDown, setIsDown] = useState(false);\n  const [startX, setStartX] = useState();\n  const [scrollLeft, setScrollLeft] = useState();\n\n  let changeAnime = (response) => {\n\n    setAnime(response)\n    if( filter !== \"init\") {\n\n    let element = carouselSelector.current\n        element.classList.remove(\"wipeContent\")\n        void element.offsetWidth\n        element.classList.add(\"wipeContent\");\n\n    }\n  }\n\n\n//   let onMouseDown = e => {\n//     setIsDown(true);\n//     setStartX(e.pageX - carouselSelector.current.offsetLeft);\n//     setScrollLeft(carouselSelector.current.scrollLeft);\n//   };\n\n//   let onMouseLeave = e => {\n//     setIsDown(false);\n//   };\n\n//   let onMouseUp = e => {\n//     setIsDown(false);\n//   };\n\n//   let onMouseMove = e => {\n//     if (!isDown) return;\n//     e.preventDefault();\n//     const x = e.pageX;\n//     const distance = (x - startX) * 3;\n//     carouselSelector.current.scrollLeft = scrollLeft - distance;\n   \n//     let scrollPercent = getScrollPercent()\n//     setScrollProgress(scrollPercent);\n    \n//   };\n\n//   let onTouchMove = e => {\n//     let scrollPercent = getScrollPercent()\n//     setScrollProgress(scrollPercent);\n// }\n\n\n\n  useEffect(() => {\n    let url = \"\"\n\n    if(filter === \"top\" || filter === \"init\") {\n      url = \"https://api.jikan.moe/v3/top/anime/1/bypopularity\"\n    } else if(filter === \"upcoming\") {\n      url = \"https://api.jikan.moe/v3/top/anime/1/upcoming\"\n    } else(\n      url = \"https://api.jikan.moe/v3/top/anime/1/movie\"\n    )\n     \n    fetch(url)\n      .then(response => response.json())\n      .then(responseJson => changeAnime(responseJson.top))\n      .catch(err => console.log(err));\n\n  }, [filter]);\n\n  useEffect(() => {\n    if (search.query !== \"\") {\n      function formatQueryParams(params) {\n        const queryItems = Object.keys(params).map(\n          key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`\n        );\n        return queryItems.join(\"&\");\n      }\n\n      const baseurl = \"https://api.jikan.moe/v3/search/anime\";\n      let params = {\n        q: search.query,\n        page: 1,\n        type: \"tv\",\n        limit: 20\n      };\n\n      let url = baseurl + \"?\" + formatQueryParams(params);\n          carouselSelector.current.classList.add('wipeContent')\n      setLoading(true)\n      fetch(url)\n        .then(response => response.json())\n        .then(responseJson => setAnime(responseJson.results) )\n        .then(res => setTimeout(() => {\n          setLoading(false)\n          carouselSelector.current.classList.add('wipeContent')\n        },500))\n        .catch(err => console.log(err));\n    }\n  }, [search.query]);\n\n  useEffect(() => {\n    dispatch({ type: \"SELECT_ANIME\", selected: {} });\n  }, [anime]);\n\n  // useEffect(() => {\n  //   console.log(filter)\n  //   if(filter === \"init\") {\n\n  //   } else {\n  //     let element = carouselSelector.current\n  //     element.classList.remove(\"wipeContent\")\n  //     void element.offsetWidth\n  //     element.classList.add(\"wipeContent\");\n  //   }\n  // }, [filter])\n\n\n\n  return (\n    <div className=\"carouselWrapper\" \n    >\n      {loading === true ? \n      <Loader  type=\"Circles\" color=\"#ef5050\" height={45} width={45} />\n      :\n      <div\n        className={`carousel ${isDown === true ? \"isDown\" : \"\"} `}\n        ref={carouselSelector}\n        // onMouseDown={e => onMouseDown(e)}\n        // onMouseLeave={e => onMouseLeave(e)}\n        // onMouseUp={e => onMouseUp(e)}\n        // onMouseMove={e => onMouseMove(e)}\n        // onTouchMove={e => onTouchMove(e)}\n\n      >\n        \n        {\n          anime.length === 0 ? \n          <p>No Results</p>\n          :\n          anime.map((anime, index) => (\n            <Anime key={index} anime={anime} />\n          ))\n        }\n      </div>\n      }\n      <style jsx>{`\n        .carouselWrapper {\n            width: 90%;\n            clip-path: polygon(2% 0, 100% 0%, 98% 100%, 0% 100%);\n            margin: 10px auto;\n            height: 35%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .carousel {\n          width: 100%;\n          cursor: pointer;\n          display: flex;\n          min-height: 175px;\n          height: 100%;\n          max-width: 100%;\n          overflow-y: scroll; /* has to be scroll, not auto */\n          -webkit-overflow-scrolling: touch;\n          text-align: center;\n          align-items: center;\n          overflow-y: hidden;\n        }\n\n        .carousel {\n          -ms-overflow-style: none; // IE 10+\n          overflow: -moz-scrollbars-none; // Firefox\n        }\n\n        .carousel::-webkit-scrollbar {\n          display: none; // Safari and Chrome\n        }\n\n        .carousel p {\n          width: 100%;\n        }\n\n        .scrollBar {\n          width: ${scrollProgress + '%'};\n          height: 2px;\n          background-color: rgb(71, 71, 51);\n        }\n\n        .wipeContent {\n          animation: wipeContent 2s;\n        }\n\n        @keyframes wipeContent {\n          0% {\n            width: 0%;\n            opacity: 0;\n          }\n\n\n          100% {\n            width: 100%;\n          }\n        }\n\n        @media ${device.laptop} {\n            .carouselWrapper {\n              width: 80%;\n              margin: 20px auto;\n              position: relative;\n              right: 1.7%;\n            }\n\n            .scrollBar {\n\n            }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Carousel;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AATA;AAAA;AAAA;AACA;AASA;AACA;AAEA;AACA;AAdA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAkBA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AApBA;AAAA;AAAA;AAAA;AAqGA;AACA;AACA;;;;A","sourceRoot":""}